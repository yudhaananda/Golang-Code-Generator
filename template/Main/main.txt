package main

import (
	"fmt"
	"net/http"
	"os"
	"time"

	"github.com/gin-gonic/gin"
	"gorm.io/driver/[dbType]"
	"github.com/joho/godotenv"
	[isWebsocket]
	"gorm.io/gorm"

	"log"
	"[project]/entity"
	"[project]/handler"
	"[project]/middleware"
	"[project]/repository"
	"[project]/service"
)

func main() {

	err := godotenv.Load(".env")
	if err != nil {
		log.Fatal(err.Error())
	}

	env := entity.SetEnv()

	dsn := fmt.Sprintf([dsnString])
	db, err := gorm.Open([dbType].Open(dsn), &gorm.Config{})

	if err != nil {
		log.Fatal(err.Error())
	}
	db.AutoMigrate([migrateArea])

	[upgrader]

	//Repository Region
	[repoArea]

	//Service Region
	[serviceArea]

	//Handler Region
	[handlerArea]

	authMiddleware := middleware.NewAuthMiddleware(jwtService, userService)

	//Router Region
	router := gin.Default()
	router.Use(func(ctx *gin.Context) {
		ctx.Writer.Header().Set("Access-Control-Allow-Origin", "*")
		ctx.Writer.Header().Set("Access-Control-Allow-Credentials", "true")
		ctx.Writer.Header().Set("Access-Control-Allow-Headers", "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With")
		ctx.Writer.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS, GET, PUT")
	})

	api := router.Group("/api/v1")
	
	api.GET("/", func(ctx *gin.Context) {
		html, err := os.ReadFile("index.html")
		if err != nil {
			ctx.Data(http.StatusBadGateway, "text/html; charset=utf-8", []byte(err.Error()))
		}
		ctx.Data(http.StatusOK, "text/html; charset=utf-8", html)
	})

	[apiArea]

	log.Fatal(router.Run())

}
