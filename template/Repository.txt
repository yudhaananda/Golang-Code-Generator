package repository

import (
	"[project]/entity"
	"[project]/helper"

	"gorm.io/gorm"
)

type [nameUpper]Repository interface {
	Save([name] entity.[nameUpper]) (entity.[nameUpper], error)
	Edit([name] entity.[nameUpper]) (entity.[nameUpper], error)
	[findBy]FindAll(paging helper.Paging) ([]entity.[nameUpper], error)
}

type [name]Repository struct {
	db *gorm.DB
}

func New[nameUpper]Repository(db *gorm.DB) *[name]Repository {
	return &[name]Repository{db}
}

func (r *[name]Repository) Save([name] entity.[nameUpper]) (entity.[nameUpper], error) {
	err := r.db.Create(&[name]).Error

	if err != nil {
		return [name], err
	}

	return [name], nil
}

func (r *[name]Repository) Edit([name] entity.[nameUpper]) (entity.[nameUpper], error) {
	err := r.db.Save([name]).Error

	if err != nil {
		return [name], err
	}

	return [name], nil
}

[findByMethod]

func (r *[name]Repository) FindAll(paging helper.Paging) ([]entity.[nameUpper], error) {
	var [name]s []entity.[nameUpper]

	err := r.db.Where("deleted_by = ?", "").Offset((paging.Page - 1) * paging.Take).Limit(paging.Take).Order(paging.OrderBy)[preload].Find(&[name]s).Error

	if err != nil {
		return [name]s, err
	}

	return [name]s, nil
}
