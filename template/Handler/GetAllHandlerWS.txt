func (h *[name]Handler) GetAll[nameUpper]s(c *gin.Context) {

	var paging helper.Paging
	conn, err := h.upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		errorMessage := gin.H{"errors": err.Error()}

		response := helper.APIResponse("Get All [nameUpper] Failed", http.StatusUnprocessableEntity, "Failed", errorMessage)
		c.JSON(http.StatusUnprocessableEntity, response)
		return
	}

	var [name]s []entity.[nameUpper]

	go func(){
		defer conn.Close()
		for {

			err = conn.ReadJSON(&paging)
			if err != nil {
				errorMessage := gin.H{"errors": err.Error()}

				response := helper.APIResponse("Get All [nameUpper] Failed", http.StatusUnprocessableEntity, "Failed", errorMessage)
				conn.WriteJSON(response)
				break
			}

		}
	}()
	go func(){
		defer conn.Close()
		for {

			temp[nameUpper]s, count, err := h.[name]Service.GetAll[nameUpper](helper.SetPagingDefault(paging))

			if err != nil {
				errorMessage := gin.H{"errors": err.Error()}

				response := helper.APIResponse("Get All [nameUpper] Failed", http.StatusUnprocessableEntity, "Failed", errorMessage)
				conn.WriteJSON(response)
				break
			}

			result := formatter.PaginatedItemsFormatter{}
			result.Format(paging.Page, float64(len(temp[nameUpper]s)), float64(count), temp[nameUpper]s)

			response := helper.APIResponse("Get All [nameUpper] Success", http.StatusOK, "Success", result)

			if len(temp[nameUpper]s) != len([name]s) {
				err = conn.WriteJSON(response)
				[name]s = temp[nameUpper]s
				if err != nil {
					errorMessage := gin.H{"errors": err.Error()}

					response := helper.APIResponse("Get All [nameUpper] Failed", http.StatusUnprocessableEntity, "Failed", errorMessage)
					conn.WriteJSON(response)
					break
				}
			} else {
				for i := 0; i < len([name]s); i++ {
					if [name]s[i].UpdatedDate != temp[nameUpper]s[i].UpdatedDate || [name]s[i].CreatedDate != temp[nameUpper]s[i].CreatedDate {
						err = conn.WriteJSON(response)
						[name]s = temp[nameUpper]s
						if err != nil {
							errorMessage := gin.H{"errors": err.Error()}

							response := helper.APIResponse("Get All [nameUpper] Failed", http.StatusUnprocessableEntity, "Failed", errorMessage)
							conn.WriteJSON(response)
							break
						}
					}
				}
			}
		}
	}()
}